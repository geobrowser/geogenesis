/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from './common';

export declare namespace MajorityVotingBase {
  export type VotingSettingsStruct = {
    votingMode: PromiseOrValue<BigNumberish>;
    supportThreshold: PromiseOrValue<BigNumberish>;
    minParticipation: PromiseOrValue<BigNumberish>;
    minDuration: PromiseOrValue<BigNumberish>;
    minProposerVotingPower: PromiseOrValue<BigNumberish>;
  };

  export type VotingSettingsStructOutput = [number, number, number, BigNumber, BigNumber] & {
    votingMode: number;
    supportThreshold: number;
    minParticipation: number;
    minDuration: BigNumber;
    minProposerVotingPower: BigNumber;
  };
}

export declare namespace PermissionLib {
  export type MultiTargetPermissionStruct = {
    operation: PromiseOrValue<BigNumberish>;
    where: PromiseOrValue<string>;
    who: PromiseOrValue<string>;
    condition: PromiseOrValue<string>;
    permissionId: PromiseOrValue<BytesLike>;
  };

  export type MultiTargetPermissionStructOutput = [number, string, string, string, string] & {
    operation: number;
    where: string;
    who: string;
    condition: string;
    permissionId: string;
  };
}

export declare namespace IPluginSetup {
  export type PreparedSetupDataStruct = {
    helpers: PromiseOrValue<string>[];
    permissions: PermissionLib.MultiTargetPermissionStruct[];
  };

  export type PreparedSetupDataStructOutput = [string[], PermissionLib.MultiTargetPermissionStructOutput[]] & {
    helpers: string[];
    permissions: PermissionLib.MultiTargetPermissionStructOutput[];
  };

  export type SetupPayloadStruct = {
    plugin: PromiseOrValue<string>;
    currentHelpers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>;
  };

  export type SetupPayloadStructOutput = [string, string[], string] & {
    plugin: string;
    currentHelpers: string[];
    data: string;
  };
}

export interface GovernancePluginsSetupInterface extends utils.Interface {
  functions: {
    'decodeInstallationParams(bytes)': FunctionFragment;
    'decodeUninstallationParams(bytes)': FunctionFragment;
    'encodeInstallationParams((uint8,uint32,uint32,uint64,uint256),address[],uint64,address)': FunctionFragment;
    'encodeUninstallationParams(address)': FunctionFragment;
    'implementation()': FunctionFragment;
    'memberAccessPluginImplementation()': FunctionFragment;
    'prepareInstallation(address,bytes)': FunctionFragment;
    'prepareUninstallation(address,(address,address[],bytes))': FunctionFragment;
    'prepareUpdate(address,uint16,(address,address[],bytes))': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'decodeInstallationParams'
      | 'decodeUninstallationParams'
      | 'encodeInstallationParams'
      | 'encodeUninstallationParams'
      | 'implementation'
      | 'memberAccessPluginImplementation'
      | 'prepareInstallation'
      | 'prepareUninstallation'
      | 'prepareUpdate'
      | 'supportsInterface'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'decodeInstallationParams', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'decodeUninstallationParams', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'encodeInstallationParams',
    values: [
      MajorityVotingBase.VotingSettingsStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ]
  ): string;
  encodeFunctionData(functionFragment: 'encodeUninstallationParams', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'memberAccessPluginImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'prepareInstallation',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'prepareUninstallation',
    values: [PromiseOrValue<string>, IPluginSetup.SetupPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'prepareUpdate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, IPluginSetup.SetupPayloadStruct]
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;

  decodeFunctionResult(functionFragment: 'decodeInstallationParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decodeUninstallationParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encodeInstallationParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encodeUninstallationParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'memberAccessPluginImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepareInstallation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepareUninstallation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prepareUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;

  events: {};
}

export interface GovernancePluginsSetup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernancePluginsSetupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeInstallationParams(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MajorityVotingBase.VotingSettingsStructOutput, string[], BigNumber, string] & {
        votingSettings: MajorityVotingBase.VotingSettingsStructOutput;
        initialEditors: string[];
        memberAccessProposalDuration: BigNumber;
        pluginUpgrader: string;
      }
    >;

    decodeUninstallationParams(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { pluginUpgrader: string }>;

    encodeInstallationParams(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _initialEditors: PromiseOrValue<string>[],
      _memberAccessProposalDuration: PromiseOrValue<BigNumberish>,
      _pluginUpgrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeUninstallationParams(_pluginUpgrader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    memberAccessPluginImplementation(overrides?: CallOverrides): Promise<[string]>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<
      [PermissionLib.MultiTargetPermissionStructOutput[]] & {
        permissionChanges: PermissionLib.MultiTargetPermissionStructOutput[];
      }
    >;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  decodeInstallationParams(
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [MajorityVotingBase.VotingSettingsStructOutput, string[], BigNumber, string] & {
      votingSettings: MajorityVotingBase.VotingSettingsStructOutput;
      initialEditors: string[];
      memberAccessProposalDuration: BigNumber;
      pluginUpgrader: string;
    }
  >;

  decodeUninstallationParams(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  encodeInstallationParams(
    _votingSettings: MajorityVotingBase.VotingSettingsStruct,
    _initialEditors: PromiseOrValue<string>[],
    _memberAccessProposalDuration: PromiseOrValue<BigNumberish>,
    _pluginUpgrader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeUninstallationParams(_pluginUpgrader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  memberAccessPluginImplementation(overrides?: CallOverrides): Promise<string>;

  prepareInstallation(
    _dao: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prepareUninstallation(
    _dao: PromiseOrValue<string>,
    _payload: IPluginSetup.SetupPayloadStruct,
    overrides?: CallOverrides
  ): Promise<PermissionLib.MultiTargetPermissionStructOutput[]>;

  prepareUpdate(
    _dao: PromiseOrValue<string>,
    _currentBuild: PromiseOrValue<BigNumberish>,
    _payload: IPluginSetup.SetupPayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    decodeInstallationParams(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MajorityVotingBase.VotingSettingsStructOutput, string[], BigNumber, string] & {
        votingSettings: MajorityVotingBase.VotingSettingsStructOutput;
        initialEditors: string[];
        memberAccessProposalDuration: BigNumber;
        pluginUpgrader: string;
      }
    >;

    decodeUninstallationParams(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    encodeInstallationParams(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _initialEditors: PromiseOrValue<string>[],
      _memberAccessProposalDuration: PromiseOrValue<BigNumberish>,
      _pluginUpgrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeUninstallationParams(_pluginUpgrader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    memberAccessPluginImplementation(overrides?: CallOverrides): Promise<string>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        mainVotingPlugin: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    >;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<PermissionLib.MultiTargetPermissionStructOutput[]>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, IPluginSetup.PreparedSetupDataStructOutput] & {
        initData: string;
        preparedSetupData: IPluginSetup.PreparedSetupDataStructOutput;
      }
    >;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    decodeInstallationParams(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    decodeUninstallationParams(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    encodeInstallationParams(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _initialEditors: PromiseOrValue<string>[],
      _memberAccessProposalDuration: PromiseOrValue<BigNumberish>,
      _pluginUpgrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeUninstallationParams(_pluginUpgrader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    memberAccessPluginImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeInstallationParams(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeUninstallationParams(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeInstallationParams(
      _votingSettings: MajorityVotingBase.VotingSettingsStruct,
      _initialEditors: PromiseOrValue<string>[],
      _memberAccessProposalDuration: PromiseOrValue<BigNumberish>,
      _pluginUpgrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeUninstallationParams(
      _pluginUpgrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberAccessPluginImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareInstallation(
      _dao: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prepareUninstallation(
      _dao: PromiseOrValue<string>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareUpdate(
      _dao: PromiseOrValue<string>,
      _currentBuild: PromiseOrValue<BigNumberish>,
      _payload: IPluginSetup.SetupPayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
