import { CONTENT_IDS, type CreateRelationOp, type Op, Relation, SYSTEM_IDS } from '@geogenesis/sdk';

const names: Record<string, string> = {
  [CONTENT_IDS.ARTICLE_TYPE]: 'Article',
  [CONTENT_IDS.CITY_TYPE]: 'City',
  [CONTENT_IDS.CLAIM_TYPE]: 'Claim',
  [CONTENT_IDS.CONTINENT_TYPE]: 'Continent',
  [CONTENT_IDS.COUNTRY_TYPE]: 'Country',
  [CONTENT_IDS.GOAL_TYPE]: 'Goal',
  [CONTENT_IDS.JOB_TYPE]: 'Job',
  [CONTENT_IDS.NEWS_EVENT_TYPE]: 'News event',
  [CONTENT_IDS.NEWS_STORY_TYPE]: 'News story',
  [CONTENT_IDS.POLICY_TYPE]: 'Policy',
  [CONTENT_IDS.PUBLISHER_TYPE]: 'Publisher',
  [CONTENT_IDS.QUOTE_TYPE]: 'Quote',
  [CONTENT_IDS.REGION_TYPE]: 'Region',
  [CONTENT_IDS.SKILL_TYPE]: 'Skill',
  [CONTENT_IDS.TAG_TYPE]: 'Tag',
  [CONTENT_IDS.TOPIC_TYPE]: 'Topic',

  [CONTENT_IDS.AVATAR_ATTRIBUTE]: 'Avatar',
  [CONTENT_IDS.BROADER_GOALS_ATTRIBUTE]: 'Broader goals',
  [CONTENT_IDS.SUBGOALS_ATTRIBUTE]: 'Subgoals',
  [CONTENT_IDS.DISCLAIMER_ATTRIBUTE]: 'Disclaimer',
  [CONTENT_IDS.EVENT_DATE_ATTRIBUTE]: 'Event date',
  [CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE]: 'Related people',
  [CONTENT_IDS.SKILLS_ATTRIBUTE]: 'Skills',
  [CONTENT_IDS.ROLES_ATTRIBUTE]: 'Roles',
  [CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE]: 'Highlighted relations',
  [CONTENT_IDS.PUBLISHER_ATTRIBUTE]: 'Publisher',
  [CONTENT_IDS.AUTHORS_ATTRIBUTE]: 'Authors',
  [CONTENT_IDS.WEB_ARCHIVE_URL_ATTRIBUTE]: 'Web archive URL',
  [CONTENT_IDS.PUBLISH_DATE_ATTRIBUTE]: 'Publish date',
  [CONTENT_IDS.OWNERS_ATTRIBUTE]: 'Owners',
  [CONTENT_IDS.SOURCES_ATTRIBUTE]: 'Sources',
  [CONTENT_IDS.QUOTES_THAT_SUPPORT_CLAIMS_ATTRIBUTE]: 'Quotes that support claims',
  [CONTENT_IDS.OPPOSING_ARGUMENTS_ATTRIBUTE]: 'Opposing arguments',
  [CONTENT_IDS.SUPPORTING_ARGUMENTS_ATTRIBUTE]: 'Supporting arguments',
  [CONTENT_IDS.WEBSITE_ATTRIBUTE]: 'Website',
  [CONTENT_IDS.BROADER_PROJECTS_ATTRIBUTE]: 'Broader projects',
  [CONTENT_IDS.SUBPROJECTS_ATTRIBUTE]: 'Subprojects',
  [CONTENT_IDS.TOPICS_ATTRIBUTE]: 'Topics',
  [CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE]: 'Related entities',
  [CONTENT_IDS.TAGS_ATTRIBUTE]: 'Tags',
  [CONTENT_IDS.X_ATTRIBUTE]: 'X',
  [CONTENT_IDS.CITIES_ATTRIBUTE]: 'Cities',
  [CONTENT_IDS.LOCATION_ATTRIBUTE]: 'Location',
  [CONTENT_IDS.WEB_URL_ATTRIBUTE]: 'Web URL',
  [CONTENT_IDS.SUBTOPICS_ATTRIBUTE]: 'Subtopics',
  [CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE]: 'Related topics',
  [CONTENT_IDS.COUNTRIES_ATTRIBUTE]: 'Countries',
  [CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE]: 'Related projects',
  [CONTENT_IDS.BROADER_TOPICS_ATTRIBUTE]: 'Broader topics',
  [CONTENT_IDS.CONTINENTS_ATTRIBUTE]: 'Continents',
  [CONTENT_IDS.PERSON_ATTRIBUTE]: 'Person',
  [CONTENT_IDS.PROJECT_ATTRIBUTE]: 'Project',
};

const attributes: Record<string, string> = {
  [CONTENT_IDS.AVATAR_ATTRIBUTE]: SYSTEM_IDS.IMAGE,
  [CONTENT_IDS.BROADER_GOALS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.SUBGOALS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.DISCLAIMER_ATTRIBUTE]: SYSTEM_IDS.TEXT,
  [CONTENT_IDS.EVENT_DATE_ATTRIBUTE]: SYSTEM_IDS.TIME,
  [CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.SKILLS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.ROLES_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.PUBLISHER_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.AUTHORS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.WEB_ARCHIVE_URL_ATTRIBUTE]: SYSTEM_IDS.URL,
  [CONTENT_IDS.PUBLISH_DATE_ATTRIBUTE]: SYSTEM_IDS.TIME,
  [CONTENT_IDS.OWNERS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.QUOTES_THAT_SUPPORT_CLAIMS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.OPPOSING_ARGUMENTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.SUPPORTING_ARGUMENTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.WEBSITE_ATTRIBUTE]: SYSTEM_IDS.URL,
  [CONTENT_IDS.BROADER_PROJECTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.SUBPROJECTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.TOPICS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.TAGS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.X_ATTRIBUTE]: SYSTEM_IDS.URL,
  [CONTENT_IDS.CITIES_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.LOCATION_ATTRIBUTE]: SYSTEM_IDS.TEXT,
  [CONTENT_IDS.WEB_URL_ATTRIBUTE]: SYSTEM_IDS.URL,
  [CONTENT_IDS.SUBTOPICS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.COUNTRIES_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.BROADER_TOPICS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.CONTINENTS_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.JOB_TYPE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.PERSON_ATTRIBUTE]: SYSTEM_IDS.RELATION,
  [CONTENT_IDS.PROJECT_ATTRIBUTE]: SYSTEM_IDS.RELATION,
};

// These types include the default types and attributes for a given type. There might be more
// attributes on a type than are listed here if they were later added by users.
const schemaTypes: Record<string, string[]> = {
  [CONTENT_IDS.ARTICLE_TYPE]: [
    CONTENT_IDS.AVATAR_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.PUBLISH_DATE_ATTRIBUTE,
    CONTENT_IDS.WEB_ARCHIVE_URL_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.PUBLISHER_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.AUTHORS_ATTRIBUTE,
    CONTENT_IDS.WEB_URL_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
  ],
  [CONTENT_IDS.CITY_TYPE]: [
    CONTENT_IDS.COUNTRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
  ],
  [CONTENT_IDS.CLAIM_TYPE]: [
    CONTENT_IDS.SUPPORTING_ARGUMENTS_ATTRIBUTE,
    CONTENT_IDS.OPPOSING_ARGUMENTS_ATTRIBUTE,
    CONTENT_IDS.QUOTES_THAT_SUPPORT_CLAIMS_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.LOCATION_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.CONTINENT_TYPE]: [
    CONTENT_IDS.COUNTRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.COUNTRY_TYPE]: [
    CONTENT_IDS.CITIES_ATTRIBUTE,
    CONTENT_IDS.CONTINENTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
  ],
  [CONTENT_IDS.GOAL_TYPE]: [
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.BROADER_GOALS_ATTRIBUTE,
    CONTENT_IDS.SUBGOALS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
  ],
  [CONTENT_IDS.JOB_TYPE]: [
    CONTENT_IDS.PERSON_ATTRIBUTE,
    CONTENT_IDS.PROJECT_ATTRIBUTE,
    CONTENT_IDS.ROLES_ATTRIBUTE
  ],
  [CONTENT_IDS.NEWS_EVENT_TYPE]: [
    CONTENT_IDS.LOCATION_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.EVENT_DATE_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.NEWS_STORY_TYPE]: [
    CONTENT_IDS.SOURCES_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.LOCATION_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.PUBLISH_DATE_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.DISCLAIMER_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [SYSTEM_IDS.PERSON_TYPE]: [
    CONTENT_IDS.AVATAR_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.X_ATTRIBUTE,
    CONTENT_IDS.ROLES_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.POLICY_TYPE]: [
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
  ],
  [SYSTEM_IDS.POST_TYPE]: [
    CONTENT_IDS.AVATAR_ATTRIBUTE,
    CONTENT_IDS.PUBLISH_DATE_ATTRIBUTE,
    CONTENT_IDS.AUTHORS_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.WEB_URL_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [SYSTEM_IDS.PROJECT_TYPE]: [
    CONTENT_IDS.AVATAR_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.X_ATTRIBUTE,
    CONTENT_IDS.BROADER_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.WEBSITE_ATTRIBUTE,
    CONTENT_IDS.SUBPROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
  ],
  [CONTENT_IDS.PUBLISHER_TYPE]: [
    CONTENT_IDS.AVATAR_ATTRIBUTE,
    CONTENT_IDS.WEBSITE_ATTRIBUTE,
    CONTENT_IDS.X_ATTRIBUTE,
    CONTENT_IDS.LOCATION_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.OWNERS_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.QUOTE_TYPE]: [
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.AUTHORS_ATTRIBUTE,
    CONTENT_IDS.SOURCES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.REGION_TYPE]: [
    CONTENT_IDS.CONTINENTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.TAGS_ATTRIBUTE,
  ],
  [SYSTEM_IDS.ROLE_ATTRIBUTE]: [
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.SKILLS_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.SKILL_TYPE]: [
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.ROLES_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
  [CONTENT_IDS.TOPIC_TYPE]: [
    CONTENT_IDS.TAGS_ATTRIBUTE,
    CONTENT_IDS.BROADER_TOPICS_ATTRIBUTE,
    CONTENT_IDS.RELATED_ENTITIES_ATTRIBUTE,
    CONTENT_IDS.SUBTOPICS_ATTRIBUTE,
    CONTENT_IDS.HIGHLIGHTED_RELATED_ENTIRIES_ATTRIBUTE,
    CONTENT_IDS.RELATED_PEOPLE_ATTRIBUTE,
    CONTENT_IDS.RELATED_PROJECTS_ATTRIBUTE,
    CONTENT_IDS.RELATED_TOPICS_ATTRIBUTE,
  ],
};

const nameOps: Op[] = Object.entries(names).map(([entityId, name]) => {
  return {
    type: 'SET_TRIPLE',
    triple: {
      attribute: SYSTEM_IDS.NAME_ATTRIBUTE,
      entity: entityId,
      value: {
        type: 'TEXT',
        value: name,
      },
    },
  } satisfies Op;
});

const attributeOps: CreateRelationOp[] = Object.keys(attributes).flatMap(attributeId => {
  return Relation.make({
    fromId: attributeId,
    toId: SYSTEM_IDS.ATTRIBUTE,
    relationTypeId: SYSTEM_IDS.TYPES_ATTRIBUTE,
  });
});

const attributeValueTypeOps: CreateRelationOp[] = Object.entries(attributes).flatMap(([attributeId, valueType]) => {
  return Relation.make({
    fromId: attributeId,
    toId: valueType,
    relationTypeId: SYSTEM_IDS.VALUE_TYPE,
  });
});

const typeOps: CreateRelationOp[] = Object.keys(schemaTypes).flatMap(typeId => {
  return Relation.make({
    fromId: typeId,
    toId: SYSTEM_IDS.SCHEMA_TYPE,
    relationTypeId: SYSTEM_IDS.TYPES_ATTRIBUTE,
  });
});

const typeSchemaOps: CreateRelationOp[] = Object.entries(schemaTypes).flatMap(([typeId, attributeIds]) => {
  return attributeIds.flatMap(attributeId => {
    return Relation.make({
      fromId: typeId,
      toId: attributeId,
      relationTypeId: SYSTEM_IDS.ATTRIBUTES,
    });
  });
});

export const ops: Op[] = [...nameOps, ...attributeOps, ...attributeValueTypeOps, ...typeOps, ...typeSchemaOps];
