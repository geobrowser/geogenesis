syntax = "proto3";

package schema;

/**
 * Profiles represent the users of Geo. Profiles are registered in the GeoProfileRegistry
 * contract and are associated with a user's EVM-based address and the space where metadata
 * representing their profile resides in.
*/
message GeoProfileRegistered {
  string requestor = 1;
  string space = 2;
  string id = 3;
}

message GeoProfilesRegistered {
  repeated GeoProfileRegistered profiles = 1;
}

/**
 * The new DAO-based contracts allow forking of spaces into successor spaces. This is so
 * users can create new spaces whose data is derived from another space.
 *
 * This is immediately useful when migrating from legacy spaces to the new DAO-based spaces,
 * but it's generally applicable across any space.
 */
message SuccessorSpaceCreated {
  string predecessorSpace = 1;
  string pluginAddress = 2;
}

message SuccessorSpacesCreated {
  repeated SuccessorSpaceCreated spaces = 1;
}

/**
 * The new DAO-based space contracts are based on Aragon's OSX architecture which uses
 * plugins to define functionality assigned to a DAO (See the top level comment for more
 * information on Aragon's DAO architecture).
 *
 * This event maps creation of the Space plugin and associates the Space plugin contract
 * address with the address of the DAO contract.
 */
message GeoSpaceCreated {
  string daoAddress = 1;
  string spaceAddress = 2;
}

message GeoSpacesCreated {
  repeated GeoSpaceCreated spaces = 1;
}

/**
 * The new DAO-based space contracts are based on Aragon's OSX architecture which uses
 * plugins to define functionality assigned to a DAO (See the top level comment for more
 * information on Aragon's DAO architecture).
 *
 * This event maps creation of any governance plugins and associates the governance plugins
 * contract addresses with the address of the DAO contract.
 *
 * As of January 23, 2024 there are two governance plugins:
 * 1. Voting plugin – This defines the voting and proposal rules and behaviors for a DAO
 * 2. Member access plugin – This defines the membership rules and behaviors for a DAO
 */
message GeoGovernancePluginCreated {
  string daoAddress = 1;
  string mainVotingAddress = 2;
  string memberAccessAddress = 3;
}

message GeoGovernancePluginsCreated {
  repeated GeoGovernancePluginCreated plugins = 1;
}

message GeoPersonalSpaceAdminPluginCreated {
  string daoAddress = 1;
  string personalAdminAddress = 2;
  string initialEditor = 3;
}

message GeoPersonalSpaceAdminPluginsCreated {
  repeated GeoPersonalSpaceAdminPluginCreated plugins = 1;
}

/**
 * This event represents adding editors to a DAO-based space
 *
 * The data model for DAO-based spaces works slightly differently than in legacy spaces.
 * This means there will be a period where we need to support both data models depending
 * on which space/contract we are working with. Eventually these data models will be merged
 * and usage of the legacy space contracts will be migrated to the DAO-based contracts, but
 * for now we are appending "V2" to permissions data models to denote it's used for the
 * DAO-based spaces.
 *
 * An editor has editing and voting permissions in a DAO-based space. Editors join a space
 * one of two ways:
 * 1. They submit a request to join the space as an editor which goes to a vote. The editors
 *    in the space vote on whether to accept the new editor.
 * 2. They are added as a set of initial editors when first creating the space. This allows
 *    space deployers to bootstrap a set of editors on space creation.
 */
message InitialEditorAdded {
  // The event emits an array of addresses. We only emit multiple addresses
  // when first creating the governance plugin. After that we only emit one
  // address at a time via proposals.
  repeated string addresses = 1;
  string pluginAddress = 2;
}

message InitialEditorsAdded {
  repeated InitialEditorAdded editors = 1;
}

/**
 * Proposals represent a proposal to change the state of a DAO-based space. Proposals can
 * represent changes to content, membership (editor or member), governance changes, subspace
 * membership, or anything else that can be executed by a DAO.
 *
 * Currently we use a simple majority voting model, where a proposal requires 51% of the
 * available votes in order to pass. Only editors are allowed to vote on proposals, but editors
 * _and_ members can create them.
 *
 * Proposals require encoding a "callback" that represents the action to be taken if the proposal
 * succeeds. For example, if a proposal is to add a new editor to the space, the callback would
 * be the encoded function call to add the editor to the space.
 *
 * ```ts
 * {
 *   to: `0x123...`, // The address of the membership contract
 *   data: `0x123...`, // The encoded function call parameters
 * }
 * ```
 */
message DaoAction {
  string to = 1;
  uint64 value = 2;
  bytes data = 3;
}

message ProposalCreated {
  string proposal_id = 1;
  string creator = 2;
  string start_time = 3;
  string end_time = 4;
  string metadata_uri = 5;
  string plugin_address = 6;
}

message ProposalsCreated {
  repeated ProposalCreated proposals = 1;
}

// Executed proposals have been approved and executed onchain in a DAO-based
// space's main voting plugin. The DAO itself also emits the executed event,
// but the ABI/interface is different. We really only care about the one
// from our plugins.
message ProposalExecuted {
  string proposal_id = 1;
  string plugin_address = 2;
}

message ProposalsExecuted {
  repeated ProposalExecuted executed_proposals = 1;
}

/**
 * Processed Proposals represent content that has been approved by a DAO
 * and executed onchain.
 *
 * We use the content URI to represent the content that was approved. We
 * only consume the `proposalId` in the content URI to map the processed
 * data to an existing proposal onchain and in the sink.
*/
message ProposalProcessed {
  string content_uri = 1;
  string plugin_address = 2;
}

message ProposalsProcessed {
  repeated ProposalProcessed proposals = 1;
}

/**
 * Added or Removed Subspaces represent adding a space contracto to the hierarchy
 * of the DAO-based space. This is useful to "link" Spaces together in a
 * tree of spaces, allowing us to curate the graph of their knowledge and 
 * permissions.
*/
message SubspaceAdded {
  string subspace = 1;
  string plugin_address = 2;
  string change_type = 3;
}

message SubspacesAdded {
  repeated SubspaceAdded subspaces = 1;
}

message SubspaceRemoved {
  string subspace = 1;
  string plugin_address = 2;
  string change_type = 3;
}

message SubspacesRemoved {
  repeated SubspaceRemoved subspaces = 1;
}

/**
 * Votes represent a vote on a proposal in a DAO-based space.
 *
 * Currently we use a simple majority voting model, where a proposal requires 51% of the
 * available votes in order to pass. Only editors are allowed to vote on proposals, but editors
 * _and_ members can create them.
 */
message VoteCast {
  string onchain_proposal_id = 1;
  string voter = 2;
  uint64 vote_option = 3;
  string plugin_address = 5;
}

message VotesCast {
  repeated VoteCast votes = 1;
}

message MemberAdded {
  string member_address = 1;
  string main_voting_plugin_address = 2;
  string change_type = 3;
}

message MembersAdded {
  repeated MemberAdded members = 1;
}

message MemberRemoved {
  string member_address = 1;
  string main_voting_plugin_address = 2;
  string change_type = 3;
}

message MembersRemoved {
  repeated MemberRemoved members = 1;
}

message EditorAdded {
  string editor_address = 1;
  string main_voting_plugin_address = 2;
  string change_type = 3;
}

message EditorsAdded {
  repeated EditorAdded editors = 1;
}

message EditorRemoved {
  string editor_address = 1;
  string main_voting_plugin_address = 2;
  string change_type = 3;
}

message EditorsRemoved {
  repeated EditorRemoved editors = 1;
}

message GeoOutput {
  repeated GeoProfileRegistered profiles_registered = 1;
  repeated GeoSpaceCreated spaces_created = 2;
  repeated GeoGovernancePluginCreated governance_plugins_created = 3;
  repeated InitialEditorAdded initial_editors_added = 4;
  repeated ProposalCreated proposals_created = 5;
  repeated VoteCast votes_cast = 6;
  repeated ProposalProcessed proposals_processed = 7;
  repeated SuccessorSpaceCreated successor_spaces_created = 8;
  repeated SubspaceAdded subspaces_added = 9;
  repeated SubspaceRemoved subspaces_removed = 10;
  repeated ProposalExecuted executed_proposals = 11;
  repeated MemberAdded members_added = 12;
  repeated EditorAdded editors_added = 13;
  repeated GeoPersonalSpaceAdminPluginCreated personal_plugins_created = 14;
}
