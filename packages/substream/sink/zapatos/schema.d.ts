/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type editor_proposal_type = 'ADD_EDITOR' | 'REMOVE_EDITOR';
  export namespace every {
    export type editor_proposal_type = ['ADD_EDITOR', 'REMOVE_EDITOR'];
  }
  export type member_proposal_type = 'ADD_MEMBER' | 'REMOVE_MEMBER';
  export namespace every {
    export type member_proposal_type = ['ADD_MEMBER', 'REMOVE_MEMBER'];
  }
  export type op_type = 'DELETE_TRIPLE' | 'SET_TRIPLE';
  export namespace every {
    export type op_type = ['DELETE_TRIPLE', 'SET_TRIPLE'];
  }
  export type proposal_status = 'accepted' | 'canceled' | 'executed' | 'proposed' | 'rejected';
  export namespace every {
    export type proposal_status = ['accepted', 'canceled', 'executed', 'proposed', 'rejected'];
  }
  export type proposal_type = 'ADD_EDITOR' | 'ADD_MEMBER' | 'ADD_SUBSPACE' | 'CONTENT' | 'REMOVE_EDITOR' | 'REMOVE_MEMBER' | 'REMOVE_SUBSPACE';
  export namespace every {
    export type proposal_type = ['ADD_EDITOR', 'ADD_MEMBER', 'ADD_SUBSPACE', 'CONTENT', 'REMOVE_EDITOR', 'REMOVE_MEMBER', 'REMOVE_SUBSPACE'];
  }
  export type space_type = 'personal' | 'public';
  export namespace every {
    export type space_type = ['personal', 'public'];
  }
  export type subspace_proposal_type = 'ADD_SUBSPACE' | 'REMOVE_SUBSPACE';
  export namespace every {
    export type subspace_proposal_type = ['ADD_SUBSPACE', 'REMOVE_SUBSPACE'];
  }
  export type triple_value_type = 'CHECKBOX' | 'COLLECTION' | 'ENTITY' | 'GEO_LOCATION' | 'NUMBER' | 'TEXT' | 'TIME' | 'URL';
  export namespace every {
    export type triple_value_type = ['CHECKBOX', 'COLLECTION', 'ENTITY', 'GEO_LOCATION', 'NUMBER', 'TEXT', 'TIME', 'URL'];
  }
  export type vote_type = 'accept' | 'reject';
  export namespace every {
    export type vote_type = ['accept', 'reject'];
  }

  /* --- tables --- */

  /**
   * **accounts**
   * - Table in database
   */
  export namespace accounts {
    export type Table = 'accounts';
    export interface Selectable {
      /**
      * **accounts.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
    }
    export interface JSONSelectable {
      /**
      * **accounts.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
    }
    export interface Whereable {
      /**
      * **accounts.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **accounts.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **accounts.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'accounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **collection_items**
   * - Table in database
   */
  export namespace collection_items {
    export type Table = 'collection_items';
    export interface Selectable {
      /**
      * **collection_items.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **collection_items.collection_item_entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_item_entity_id: string;
      /**
      * **collection_items.index**
      * - `text` in database
      * - Nullable, no default
      */
      index: string | null;
      /**
      * **collection_items.collection_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_id: string;
      /**
      * **collection_items.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
    }
    export interface JSONSelectable {
      /**
      * **collection_items.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **collection_items.collection_item_entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_item_entity_id: string;
      /**
      * **collection_items.index**
      * - `text` in database
      * - Nullable, no default
      */
      index: string | null;
      /**
      * **collection_items.collection_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_id: string;
      /**
      * **collection_items.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
    }
    export interface Whereable {
      /**
      * **collection_items.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_items.collection_item_entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_item_entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_items.index**
      * - `text` in database
      * - Nullable, no default
      */
      index?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_items.collection_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collection_items.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collection_items.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collection_items.collection_item_entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_item_entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collection_items.index**
      * - `text` in database
      * - Nullable, no default
      */
      index?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **collection_items.collection_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collection_items.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collection_items.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collection_items.collection_item_entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_item_entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collection_items.index**
      * - `text` in database
      * - Nullable, no default
      */
      index?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **collection_items.collection_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      collection_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collection_items.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collection_items_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **collections**
   * - Table in database
   */
  export namespace collections {
    export type Table = 'collections';
    export interface Selectable {
      /**
      * **collections.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **collections.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
    }
    export interface JSONSelectable {
      /**
      * **collections.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **collections.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
    }
    export interface Whereable {
      /**
      * **collections.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **collections.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **collections.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **collections.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **collections.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **collections.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'collections_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **cursors**
   * - Table in database
   */
  export namespace cursors {
    export type Table = 'cursors';
    export interface Selectable {
      /**
      * **cursors.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **cursors.cursor**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cursor: string;
      /**
      * **cursors.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
    }
    export interface JSONSelectable {
      /**
      * **cursors.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **cursors.cursor**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cursor: string;
      /**
      * **cursors.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
    }
    export interface Whereable {
      /**
      * **cursors.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cursors.cursor**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cursor?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cursors.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cursors.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **cursors.cursor**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cursor: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cursors.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cursors.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **cursors.cursor**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      cursor?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cursors.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'cursors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **entities**
   * - Table in database
   */
  export namespace entities {
    export type Table = 'entities';
    export interface Selectable {
      /**
      * **entities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **entities.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **entities.description**
      * - `varchar` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **entities.cover**
      * - `text` in database
      * - Nullable, no default
      */
      cover: string | null;
      /**
      * **entities.avatar**
      * - `text` in database
      * - Nullable, no default
      */
      avatar: string | null;
      /**
      * **entities.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **entities.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **entities.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **entities.updated_at**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at: number | null;
      /**
      * **entities.updated_at_block**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at_block: number | null;
    }
    export interface JSONSelectable {
      /**
      * **entities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **entities.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **entities.description**
      * - `varchar` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **entities.cover**
      * - `text` in database
      * - Nullable, no default
      */
      cover: string | null;
      /**
      * **entities.avatar**
      * - `text` in database
      * - Nullable, no default
      */
      avatar: string | null;
      /**
      * **entities.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **entities.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **entities.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **entities.updated_at**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at: number | null;
      /**
      * **entities.updated_at_block**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at_block: number | null;
    }
    export interface Whereable {
      /**
      * **entities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.description**
      * - `varchar` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.cover**
      * - `text` in database
      * - Nullable, no default
      */
      cover?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.avatar**
      * - `text` in database
      * - Nullable, no default
      */
      avatar?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.updated_at**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entities.updated_at_block**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **entities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entities.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **entities.description**
      * - `varchar` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **entities.cover**
      * - `text` in database
      * - Nullable, no default
      */
      cover?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **entities.avatar**
      * - `text` in database
      * - Nullable, no default
      */
      avatar?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **entities.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entities.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **entities.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **entities.updated_at**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **entities.updated_at_block**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at_block?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **entities.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entities.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **entities.description**
      * - `varchar` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **entities.cover**
      * - `text` in database
      * - Nullable, no default
      */
      cover?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **entities.avatar**
      * - `text` in database
      * - Nullable, no default
      */
      avatar?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **entities.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entities.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **entities.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **entities.updated_at**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **entities.updated_at_block**
      * - `int4` in database
      * - Nullable, no default
      */
      updated_at_block?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'entities_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **entity_types**
   * - Table in database
   */
  export namespace entity_types {
    export type Table = 'entity_types';
    export interface Selectable {
      /**
      * **entity_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('entity_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **entity_types.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **entity_types.type_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type_id: string;
      /**
      * **entity_types.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **entity_types.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **entity_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('entity_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **entity_types.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **entity_types.type_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type_id: string;
      /**
      * **entity_types.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **entity_types.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **entity_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('entity_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_types.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_types.type_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_types.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **entity_types.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **entity_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('entity_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **entity_types.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entity_types.type_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **entity_types.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **entity_types.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **entity_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('entity_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **entity_types.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entity_types.type_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      type_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **entity_types.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **entity_types.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'entity_types_pkey' | 'geo_entity_types_unique_entity_type_pair';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **log_entries**
   * - Table in database
   */
  export namespace log_entries {
    export type Table = 'log_entries';
    export interface Selectable {
      /**
      * **log_entries.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **log_entries.created_at_block**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_at_block: string;
      /**
      * **log_entries.uri**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      uri: string;
      /**
      * **log_entries.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **log_entries.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **log_entries.mime_type**
      * - `text` in database
      * - Nullable, no default
      */
      mime_type: string | null;
      /**
      * **log_entries.decoded**
      * - `text` in database
      * - Nullable, no default
      */
      decoded: string | null;
      /**
      * **log_entries.json**
      * - `text` in database
      * - Nullable, no default
      */
      json: string | null;
    }
    export interface JSONSelectable {
      /**
      * **log_entries.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **log_entries.created_at_block**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_at_block: string;
      /**
      * **log_entries.uri**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      uri: string;
      /**
      * **log_entries.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **log_entries.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **log_entries.mime_type**
      * - `text` in database
      * - Nullable, no default
      */
      mime_type: string | null;
      /**
      * **log_entries.decoded**
      * - `text` in database
      * - Nullable, no default
      */
      decoded: string | null;
      /**
      * **log_entries.json**
      * - `text` in database
      * - Nullable, no default
      */
      json: string | null;
    }
    export interface Whereable {
      /**
      * **log_entries.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.created_at_block**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.uri**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      uri?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.mime_type**
      * - `text` in database
      * - Nullable, no default
      */
      mime_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.decoded**
      * - `text` in database
      * - Nullable, no default
      */
      decoded?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **log_entries.json**
      * - `text` in database
      * - Nullable, no default
      */
      json?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **log_entries.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **log_entries.created_at_block**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_at_block: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **log_entries.uri**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      uri: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **log_entries.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **log_entries.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **log_entries.mime_type**
      * - `text` in database
      * - Nullable, no default
      */
      mime_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **log_entries.decoded**
      * - `text` in database
      * - Nullable, no default
      */
      decoded?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **log_entries.json**
      * - `text` in database
      * - Nullable, no default
      */
      json?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **log_entries.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **log_entries.created_at_block**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **log_entries.uri**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      uri?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **log_entries.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **log_entries.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **log_entries.mime_type**
      * - `text` in database
      * - Nullable, no default
      */
      mime_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **log_entries.decoded**
      * - `text` in database
      * - Nullable, no default
      */
      decoded?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **log_entries.json**
      * - `text` in database
      * - Nullable, no default
      */
      json?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'log_entries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **onchain_profiles**
   * - Table in database
   */
  export namespace onchain_profiles {
    export type Table = 'onchain_profiles';
    export interface Selectable {
      /**
      * **onchain_profiles.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **onchain_profiles.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **onchain_profiles.home_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      home_space_id: string;
      /**
      * **onchain_profiles.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **onchain_profiles.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **onchain_profiles.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **onchain_profiles.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **onchain_profiles.home_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      home_space_id: string;
      /**
      * **onchain_profiles.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **onchain_profiles.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **onchain_profiles.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **onchain_profiles.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **onchain_profiles.home_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      home_space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **onchain_profiles.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **onchain_profiles.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **onchain_profiles.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **onchain_profiles.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **onchain_profiles.home_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      home_space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **onchain_profiles.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **onchain_profiles.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **onchain_profiles.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **onchain_profiles.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **onchain_profiles.home_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      home_space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **onchain_profiles.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **onchain_profiles.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'onchain_profiles_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **ops**
   * - Table in database
   */
  export namespace ops {
    export type Table = 'ops';
    export interface Selectable {
      /**
      * **ops.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **ops.type**
      * - `op_type` in database
      * - `NOT NULL`, no default
      */
      type: op_type;
      /**
      * **ops.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **ops.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **ops.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string;
      /**
      * **ops.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type;
      /**
      * **ops.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value: string | null;
      /**
      * **ops.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value: string | null;
      /**
      * **ops.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id: string | null;
      /**
      * **ops.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id: string | null;
      /**
      * **ops.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string;
      /**
      * **ops.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **ops.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **ops.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **ops.type**
      * - `op_type` in database
      * - `NOT NULL`, no default
      */
      type: op_type;
      /**
      * **ops.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **ops.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **ops.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string;
      /**
      * **ops.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type;
      /**
      * **ops.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value: string | null;
      /**
      * **ops.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value: string | null;
      /**
      * **ops.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id: string | null;
      /**
      * **ops.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id: string | null;
      /**
      * **ops.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string;
      /**
      * **ops.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **ops.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **ops.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.type**
      * - `op_type` in database
      * - `NOT NULL`, no default
      */
      type?: op_type | db.Parameter<op_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, op_type | db.Parameter<op_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type?: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **ops.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **ops.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ops.type**
      * - `op_type` in database
      * - `NOT NULL`, no default
      */
      type: op_type | db.Parameter<op_type> | db.SQLFragment;
      /**
      * **ops.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ops.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ops.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ops.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment;
      /**
      * **ops.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ops.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ops.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ops.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **ops.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **ops.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **ops.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **ops.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ops.type**
      * - `op_type` in database
      * - `NOT NULL`, no default
      */
      type?: op_type | db.Parameter<op_type> | db.SQLFragment | db.SQLFragment<any, op_type | db.Parameter<op_type> | db.SQLFragment>;
      /**
      * **ops.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ops.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ops.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ops.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type?: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.SQLFragment<any, triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment>;
      /**
      * **ops.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ops.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ops.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ops.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **ops.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **ops.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **ops.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ops_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposal_votes**
   * - Table in database
   */
  export namespace proposal_votes {
    export type Table = 'proposal_votes';
    export interface Selectable {
      /**
      * **proposal_votes.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposal_votes.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string;
      /**
      * **proposal_votes.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposal_votes.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposal_votes.vote**
      * - `vote_type` in database
      * - `NOT NULL`, no default
      */
      vote: vote_type;
      /**
      * **proposal_votes.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposal_votes.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **proposal_votes.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposal_votes.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string;
      /**
      * **proposal_votes.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposal_votes.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposal_votes.vote**
      * - `vote_type` in database
      * - `NOT NULL`, no default
      */
      vote: vote_type;
      /**
      * **proposal_votes.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposal_votes.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **proposal_votes.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.vote**
      * - `vote_type` in database
      * - `NOT NULL`, no default
      */
      vote?: vote_type | db.Parameter<vote_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, vote_type | db.Parameter<vote_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposal_votes.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposal_votes.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposal_votes.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposal_votes.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposal_votes.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposal_votes.vote**
      * - `vote_type` in database
      * - `NOT NULL`, no default
      */
      vote: vote_type | db.Parameter<vote_type> | db.SQLFragment;
      /**
      * **proposal_votes.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposal_votes.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposal_votes.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposal_votes.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposal_votes.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposal_votes.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposal_votes.vote**
      * - `vote_type` in database
      * - `NOT NULL`, no default
      */
      vote?: vote_type | db.Parameter<vote_type> | db.SQLFragment | db.SQLFragment<any, vote_type | db.Parameter<vote_type> | db.SQLFragment>;
      /**
      * **proposal_votes.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposal_votes.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposal_votes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposals**
   * - Table in database
   */
  export namespace proposals {
    export type Table = 'proposals';
    export interface Selectable {
      /**
      * **proposals.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposals.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string;
      /**
      * **proposals.plugin_address**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      plugin_address: string;
      /**
      * **proposals.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposals.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **proposals.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **proposals.uri**
      * - `text` in database
      * - Nullable, no default
      */
      uri: string | null;
      /**
      * **proposals.type**
      * - `proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: proposal_type;
      /**
      * **proposals.status**
      * - `proposal_status` in database
      * - `NOT NULL`, no default
      */
      status: proposal_status;
      /**
      * **proposals.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposals.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposals.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **proposals.start_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      start_time: number;
      /**
      * **proposals.end_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      end_time: number;
    }
    export interface JSONSelectable {
      /**
      * **proposals.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposals.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string;
      /**
      * **proposals.plugin_address**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      plugin_address: string;
      /**
      * **proposals.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposals.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **proposals.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **proposals.uri**
      * - `text` in database
      * - Nullable, no default
      */
      uri: string | null;
      /**
      * **proposals.type**
      * - `proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: proposal_type;
      /**
      * **proposals.status**
      * - `proposal_status` in database
      * - `NOT NULL`, no default
      */
      status: proposal_status;
      /**
      * **proposals.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposals.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposals.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **proposals.start_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      start_time: number;
      /**
      * **proposals.end_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      end_time: number;
    }
    export interface Whereable {
      /**
      * **proposals.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.plugin_address**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.uri**
      * - `text` in database
      * - Nullable, no default
      */
      uri?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.type**
      * - `proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: proposal_type | db.Parameter<proposal_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, proposal_type | db.Parameter<proposal_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.status**
      * - `proposal_status` in database
      * - `NOT NULL`, no default
      */
      status?: proposal_status | db.Parameter<proposal_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, proposal_status | db.Parameter<proposal_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.start_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      start_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposals.end_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      end_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposals.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.plugin_address**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      plugin_address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **proposals.uri**
      * - `text` in database
      * - Nullable, no default
      */
      uri?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **proposals.type**
      * - `proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: proposal_type | db.Parameter<proposal_type> | db.SQLFragment;
      /**
      * **proposals.status**
      * - `proposal_status` in database
      * - `NOT NULL`, no default
      */
      status: proposal_status | db.Parameter<proposal_status> | db.SQLFragment;
      /**
      * **proposals.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposals.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposals.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposals.start_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      start_time: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposals.end_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      end_time: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposals.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.onchain_proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      onchain_proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.plugin_address**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **proposals.uri**
      * - `text` in database
      * - Nullable, no default
      */
      uri?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **proposals.type**
      * - `proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: proposal_type | db.Parameter<proposal_type> | db.SQLFragment | db.SQLFragment<any, proposal_type | db.Parameter<proposal_type> | db.SQLFragment>;
      /**
      * **proposals.status**
      * - `proposal_status` in database
      * - `NOT NULL`, no default
      */
      status?: proposal_status | db.Parameter<proposal_status> | db.SQLFragment | db.SQLFragment<any, proposal_status | db.Parameter<proposal_status> | db.SQLFragment>;
      /**
      * **proposals.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposals.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposals.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposals.start_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      start_time?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposals.end_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      end_time?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposals_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposed_editors**
   * - Table in database
   */
  export namespace proposed_editors {
    export type Table = 'proposed_editors';
    export interface Selectable {
      /**
      * **proposed_editors.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposed_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposed_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_editors.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_editors.type**
      * - `editor_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: editor_proposal_type;
    }
    export interface JSONSelectable {
      /**
      * **proposed_editors.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposed_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposed_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_editors.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_editors.type**
      * - `editor_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: editor_proposal_type;
    }
    export interface Whereable {
      /**
      * **proposed_editors.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_editors.type**
      * - `editor_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: editor_proposal_type | db.Parameter<editor_proposal_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, editor_proposal_type | db.Parameter<editor_proposal_type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposed_editors.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_editors.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_editors.type**
      * - `editor_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: editor_proposal_type | db.Parameter<editor_proposal_type> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposed_editors.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_editors.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_editors.type**
      * - `editor_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: editor_proposal_type | db.Parameter<editor_proposal_type> | db.SQLFragment | db.SQLFragment<any, editor_proposal_type | db.Parameter<editor_proposal_type> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposed_editors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposed_members**
   * - Table in database
   */
  export namespace proposed_members {
    export type Table = 'proposed_members';
    export interface Selectable {
      /**
      * **proposed_members.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposed_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposed_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_members.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_members.type**
      * - `member_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: member_proposal_type;
    }
    export interface JSONSelectable {
      /**
      * **proposed_members.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **proposed_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **proposed_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_members.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_members.type**
      * - `member_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: member_proposal_type;
    }
    export interface Whereable {
      /**
      * **proposed_members.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_members.type**
      * - `member_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: member_proposal_type | db.Parameter<member_proposal_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, member_proposal_type | db.Parameter<member_proposal_type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposed_members.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_members.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_members.type**
      * - `member_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: member_proposal_type | db.Parameter<member_proposal_type> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposed_members.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_members.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_members.type**
      * - `member_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: member_proposal_type | db.Parameter<member_proposal_type> | db.SQLFragment | db.SQLFragment<any, member_proposal_type | db.Parameter<member_proposal_type> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposed_members_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposed_subspaces**
   * - Table in database
   */
  export namespace proposed_subspaces {
    export type Table = 'proposed_subspaces';
    export interface Selectable {
      /**
      * **proposed_subspaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_subspaces.subspace**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace: string;
      /**
      * **proposed_subspaces.parent_space**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space: string;
      /**
      * **proposed_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_subspaces.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_subspaces.type**
      * - `subspace_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: subspace_proposal_type;
    }
    export interface JSONSelectable {
      /**
      * **proposed_subspaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_subspaces.subspace**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace: string;
      /**
      * **proposed_subspaces.parent_space**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space: string;
      /**
      * **proposed_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_subspaces.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_subspaces.type**
      * - `subspace_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: subspace_proposal_type;
    }
    export interface Whereable {
      /**
      * **proposed_subspaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.subspace**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.parent_space**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_subspaces.type**
      * - `subspace_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: subspace_proposal_type | db.Parameter<subspace_proposal_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, subspace_proposal_type | db.Parameter<subspace_proposal_type> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposed_subspaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_subspaces.subspace**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_subspaces.parent_space**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_subspaces.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_subspaces.type**
      * - `subspace_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type: subspace_proposal_type | db.Parameter<subspace_proposal_type> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposed_subspaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_subspaces.subspace**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_subspaces.parent_space**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_subspaces.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_subspaces.type**
      * - `subspace_proposal_type` in database
      * - `NOT NULL`, no default
      */
      type?: subspace_proposal_type | db.Parameter<subspace_proposal_type> | db.SQLFragment | db.SQLFragment<any, subspace_proposal_type | db.Parameter<subspace_proposal_type> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposed_subspaces_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **proposed_versions**
   * - Table in database
   */
  export namespace proposed_versions {
    export type Table = 'proposed_versions';
    export interface Selectable {
      /**
      * **proposed_versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **proposed_versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **proposed_versions.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
    }
    export interface JSONSelectable {
      /**
      * **proposed_versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **proposed_versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **proposed_versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **proposed_versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **proposed_versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **proposed_versions.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string;
      /**
      * **proposed_versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
    }
    export interface Whereable {
      /**
      * **proposed_versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **proposed_versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **proposed_versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **proposed_versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_versions.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **proposed_versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **proposed_versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **proposed_versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_versions.proposal_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposal_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **proposed_versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'proposed_versions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **space_editors**
   * - Table in database
   */
  export namespace space_editors {
    export type Table = 'space_editors';
    export interface Selectable {
      /**
      * **space_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **space_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **space_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **space_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **space_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **space_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **space_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **space_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **space_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **space_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **space_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **space_editors.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_editors.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_editors.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **space_editors.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'space_editors_unique_account_space_pair';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **space_members**
   * - Table in database
   */
  export namespace space_members {
    export type Table = 'space_members';
    export interface Selectable {
      /**
      * **space_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **space_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **space_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **space_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface JSONSelectable {
      /**
      * **space_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **space_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string;
      /**
      * **space_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **space_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
    }
    export interface Whereable {
      /**
      * **space_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **space_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **space_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **space_members.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_members.account_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      account_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_members.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **space_members.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'space_members_unique_account_space_pair';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **space_subspaces**
   * - Table in database
   */
  export namespace space_subspaces {
    export type Table = 'space_subspaces';
    export interface Selectable {
      /**
      * **space_subspaces.subspace_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace_id: string;
      /**
      * **space_subspaces.parent_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space_id: string;
      /**
      * **space_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **space_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
    }
    export interface JSONSelectable {
      /**
      * **space_subspaces.subspace_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace_id: string;
      /**
      * **space_subspaces.parent_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space_id: string;
      /**
      * **space_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **space_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
    }
    export interface Whereable {
      /**
      * **space_subspaces.subspace_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_subspaces.parent_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **space_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **space_subspaces.subspace_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_subspaces.parent_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **space_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **space_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **space_subspaces.subspace_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      subspace_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_subspaces.parent_space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **space_subspaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **space_subspaces.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'space_subspaces_unique_space_subspace_pair';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **spaces**
   * - Table in database
   */
  export namespace spaces {
    export type Table = 'spaces';
    export interface Selectable {
      /**
      * **spaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **spaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **spaces.is_root_space**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_root_space: boolean;
      /**
      * **spaces.type**
      * - `space_type` in database
      * - `NOT NULL`, no default
      */
      type: space_type;
      /**
      * **spaces.space_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      space_plugin_address: string | null;
      /**
      * **spaces.main_voting_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      main_voting_plugin_address: string | null;
      /**
      * **spaces.member_access_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      member_access_plugin_address: string | null;
      /**
      * **spaces.personal_space_admin_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      personal_space_admin_plugin_address: string | null;
      /**
      * **spaces.configuration_id**
      * - `text` in database
      * - Nullable, no default
      */
      configuration_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **spaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **spaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **spaces.is_root_space**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_root_space: boolean;
      /**
      * **spaces.type**
      * - `space_type` in database
      * - `NOT NULL`, no default
      */
      type: space_type;
      /**
      * **spaces.space_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      space_plugin_address: string | null;
      /**
      * **spaces.main_voting_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      main_voting_plugin_address: string | null;
      /**
      * **spaces.member_access_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      member_access_plugin_address: string | null;
      /**
      * **spaces.personal_space_admin_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      personal_space_admin_plugin_address: string | null;
      /**
      * **spaces.configuration_id**
      * - `text` in database
      * - Nullable, no default
      */
      configuration_id: string | null;
    }
    export interface Whereable {
      /**
      * **spaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.is_root_space**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_root_space?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.type**
      * - `space_type` in database
      * - `NOT NULL`, no default
      */
      type?: space_type | db.Parameter<space_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, space_type | db.Parameter<space_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.space_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      space_plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.main_voting_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      main_voting_plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.member_access_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      member_access_plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.personal_space_admin_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      personal_space_admin_plugin_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spaces.configuration_id**
      * - `text` in database
      * - Nullable, no default
      */
      configuration_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **spaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **spaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **spaces.is_root_space**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_root_space: boolean | db.Parameter<boolean> | db.SQLFragment;
      /**
      * **spaces.type**
      * - `space_type` in database
      * - `NOT NULL`, no default
      */
      type: space_type | db.Parameter<space_type> | db.SQLFragment;
      /**
      * **spaces.space_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      space_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spaces.main_voting_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      main_voting_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spaces.member_access_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      member_access_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spaces.personal_space_admin_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      personal_space_admin_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spaces.configuration_id**
      * - `text` in database
      * - Nullable, no default
      */
      configuration_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **spaces.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **spaces.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **spaces.is_root_space**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_root_space?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
      /**
      * **spaces.type**
      * - `space_type` in database
      * - `NOT NULL`, no default
      */
      type?: space_type | db.Parameter<space_type> | db.SQLFragment | db.SQLFragment<any, space_type | db.Parameter<space_type> | db.SQLFragment>;
      /**
      * **spaces.space_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      space_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spaces.main_voting_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      main_voting_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spaces.member_access_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      member_access_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spaces.personal_space_admin_plugin_address**
      * - `text` in database
      * - Nullable, no default
      */
      personal_space_admin_plugin_address?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spaces.configuration_id**
      * - `text` in database
      * - Nullable, no default
      */
      configuration_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'spaces_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **triples**
   * - Table in database
   */
  export namespace triples {
    export type Table = 'triples';
    export interface Selectable {
      /**
      * **triples.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **triples.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **triples.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string;
      /**
      * **triples.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type;
      /**
      * **triples.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value: string | null;
      /**
      * **triples.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value: string | null;
      /**
      * **triples.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id: string | null;
      /**
      * **triples.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id: string | null;
      /**
      * **triples.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **triples.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **triples.is_stale**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_stale: boolean;
    }
    export interface JSONSelectable {
      /**
      * **triples.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
      /**
      * **triples.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **triples.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string;
      /**
      * **triples.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type;
      /**
      * **triples.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value: string | null;
      /**
      * **triples.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value: string | null;
      /**
      * **triples.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id: string | null;
      /**
      * **triples.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id: string | null;
      /**
      * **triples.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **triples.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **triples.is_stale**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_stale: boolean;
    }
    export interface Whereable {
      /**
      * **triples.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type?: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **triples.is_stale**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_stale?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **triples.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **triples.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **triples.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **triples.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment;
      /**
      * **triples.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **triples.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **triples.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **triples.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **triples.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **triples.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **triples.is_stale**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_stale: boolean | db.Parameter<boolean> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **triples.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **triples.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **triples.attribute_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      attribute_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **triples.value_type**
      * - `triple_value_type` in database
      * - `NOT NULL`, no default
      */
      value_type?: triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment | db.SQLFragment<any, triple_value_type | db.Parameter<triple_value_type> | db.SQLFragment>;
      /**
      * **triples.number_value**
      * - `text` in database
      * - Nullable, no default
      */
      number_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **triples.text_value**
      * - `text` in database
      * - Nullable, no default
      */
      text_value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **triples.entity_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      entity_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **triples.collection_value_id**
      * - `text` in database
      * - Nullable, no default
      */
      collection_value_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **triples.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **triples.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **triples.is_stale**
      * - `bool` in database
      * - `NOT NULL`, no default
      */
      is_stale?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
    }
    export type UniqueIndex = 'triples_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **versions**
   * - Table in database
   */
  export namespace versions {
    export type Table = 'versions';
    export interface Selectable {
      /**
      * **versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **versions.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string;
      /**
      * **versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
    }
    export interface JSONSelectable {
      /**
      * **versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number;
      /**
      * **versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number;
      /**
      * **versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string;
      /**
      * **versions.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string;
      /**
      * **versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string;
      /**
      * **versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string;
    }
    export interface Whereable {
      /**
      * **versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **versions.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **versions.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **versions.created_at**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **versions.created_at_block**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **versions.created_by_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **versions.proposed_version_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      proposed_version_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **versions.entity_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      entity_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **versions.space_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      space_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'versions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = accounts.Table | collection_items.Table | collections.Table | cursors.Table | entities.Table | entity_types.Table | log_entries.Table | onchain_profiles.Table | ops.Table | proposal_votes.Table | proposals.Table | proposed_editors.Table | proposed_members.Table | proposed_subspaces.Table | proposed_versions.Table | space_editors.Table | space_members.Table | space_subspaces.Table | spaces.Table | triples.Table | versions.Table;
    export type Selectable = accounts.Selectable | collection_items.Selectable | collections.Selectable | cursors.Selectable | entities.Selectable | entity_types.Selectable | log_entries.Selectable | onchain_profiles.Selectable | ops.Selectable | proposal_votes.Selectable | proposals.Selectable | proposed_editors.Selectable | proposed_members.Selectable | proposed_subspaces.Selectable | proposed_versions.Selectable | space_editors.Selectable | space_members.Selectable | space_subspaces.Selectable | spaces.Selectable | triples.Selectable | versions.Selectable;
    export type JSONSelectable = accounts.JSONSelectable | collection_items.JSONSelectable | collections.JSONSelectable | cursors.JSONSelectable | entities.JSONSelectable | entity_types.JSONSelectable | log_entries.JSONSelectable | onchain_profiles.JSONSelectable | ops.JSONSelectable | proposal_votes.JSONSelectable | proposals.JSONSelectable | proposed_editors.JSONSelectable | proposed_members.JSONSelectable | proposed_subspaces.JSONSelectable | proposed_versions.JSONSelectable | space_editors.JSONSelectable | space_members.JSONSelectable | space_subspaces.JSONSelectable | spaces.JSONSelectable | triples.JSONSelectable | versions.JSONSelectable;
    export type Whereable = accounts.Whereable | collection_items.Whereable | collections.Whereable | cursors.Whereable | entities.Whereable | entity_types.Whereable | log_entries.Whereable | onchain_profiles.Whereable | ops.Whereable | proposal_votes.Whereable | proposals.Whereable | proposed_editors.Whereable | proposed_members.Whereable | proposed_subspaces.Whereable | proposed_versions.Whereable | space_editors.Whereable | space_members.Whereable | space_subspaces.Whereable | spaces.Whereable | triples.Whereable | versions.Whereable;
    export type Insertable = accounts.Insertable | collection_items.Insertable | collections.Insertable | cursors.Insertable | entities.Insertable | entity_types.Insertable | log_entries.Insertable | onchain_profiles.Insertable | ops.Insertable | proposal_votes.Insertable | proposals.Insertable | proposed_editors.Insertable | proposed_members.Insertable | proposed_subspaces.Insertable | proposed_versions.Insertable | space_editors.Insertable | space_members.Insertable | space_subspaces.Insertable | spaces.Insertable | triples.Insertable | versions.Insertable;
    export type Updatable = accounts.Updatable | collection_items.Updatable | collections.Updatable | cursors.Updatable | entities.Updatable | entity_types.Updatable | log_entries.Updatable | onchain_profiles.Updatable | ops.Updatable | proposal_votes.Updatable | proposals.Updatable | proposed_editors.Updatable | proposed_members.Updatable | proposed_subspaces.Updatable | proposed_versions.Updatable | space_editors.Updatable | space_members.Updatable | space_subspaces.Updatable | spaces.Updatable | triples.Updatable | versions.Updatable;
    export type UniqueIndex = accounts.UniqueIndex | collection_items.UniqueIndex | collections.UniqueIndex | cursors.UniqueIndex | entities.UniqueIndex | entity_types.UniqueIndex | log_entries.UniqueIndex | onchain_profiles.UniqueIndex | ops.UniqueIndex | proposal_votes.UniqueIndex | proposals.UniqueIndex | proposed_editors.UniqueIndex | proposed_members.UniqueIndex | proposed_subspaces.UniqueIndex | proposed_versions.UniqueIndex | space_editors.UniqueIndex | space_members.UniqueIndex | space_subspaces.UniqueIndex | spaces.UniqueIndex | triples.UniqueIndex | versions.UniqueIndex;
    export type Column = accounts.Column | collection_items.Column | collections.Column | cursors.Column | entities.Column | entity_types.Column | log_entries.Column | onchain_profiles.Column | ops.Column | proposal_votes.Column | proposals.Column | proposed_editors.Column | proposed_members.Column | proposed_subspaces.Column | proposed_versions.Column | space_editors.Column | space_members.Column | space_subspaces.Column | spaces.Column | triples.Column | versions.Column;
  
    export type AllBaseTables = [accounts.Table, collection_items.Table, collections.Table, cursors.Table, entities.Table, entity_types.Table, log_entries.Table, onchain_profiles.Table, ops.Table, proposal_votes.Table, proposals.Table, proposed_editors.Table, proposed_members.Table, proposed_subspaces.Table, proposed_versions.Table, space_editors.Table, space_members.Table, space_subspaces.Table, spaces.Table, triples.Table, versions.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [accounts.Table, collection_items.Table, collections.Table, cursors.Table, entities.Table, entity_types.Table, log_entries.Table, onchain_profiles.Table, ops.Table, proposal_votes.Table, proposals.Table, proposed_editors.Table, proposed_members.Table, proposed_subspaces.Table, proposed_versions.Table, space_editors.Table, space_members.Table, space_subspaces.Table, spaces.Table, triples.Table, versions.Table];
  }



  /* === schema: cache === */

  export namespace cache {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **cache.entries**
     * - Table in database
     */
    export namespace entries {
      export type Table = 'cache.entries';
      export interface Selectable {
        /**
        * **cache.entries.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.entries_id_seq'::regclass)`
        */
        id: number;
        /**
        * **cache.entries.block_number**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        block_number: number;
        /**
        * **cache.entries.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string;
        /**
        * **cache.entries.timestamp**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        timestamp: number;
        /**
        * **cache.entries.data**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        data: db.JSONValue;
      }
      export interface JSONSelectable {
        /**
        * **cache.entries.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.entries_id_seq'::regclass)`
        */
        id: number;
        /**
        * **cache.entries.block_number**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        block_number: number;
        /**
        * **cache.entries.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string;
        /**
        * **cache.entries.timestamp**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        timestamp: number;
        /**
        * **cache.entries.data**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        data: db.JSONValue;
      }
      export interface Whereable {
        /**
        * **cache.entries.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.entries_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.entries.block_number**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.entries.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.entries.timestamp**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.entries.data**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **cache.entries.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.entries_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **cache.entries.block_number**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        block_number: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **cache.entries.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.entries.timestamp**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        timestamp: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **cache.entries.data**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        data: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **cache.entries.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.entries_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **cache.entries.block_number**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **cache.entries.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.entries.timestamp**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        timestamp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **cache.entries.data**
        * - `jsonb` in database
        * - `NOT NULL`, no default
        */
        data?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      }
      export type UniqueIndex = 'entries_pkey' | 'unique_cached_entries';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **cache.roles**
     * - Table in database
     */
    export namespace roles {
      export type Table = 'cache.roles';
      export interface Selectable {
        /**
        * **cache.roles.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.roles_id_seq'::regclass)`
        */
        id: number;
        /**
        * **cache.roles.role**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        role: string;
        /**
        * **cache.roles.account**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        account: string;
        /**
        * **cache.roles.sender**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        sender: string;
        /**
        * **cache.roles.space**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        space: string;
        /**
        * **cache.roles.type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        type: string;
        /**
        * **cache.roles.created_at**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at: number;
        /**
        * **cache.roles.created_at_block**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at_block: number;
        /**
        * **cache.roles.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string;
      }
      export interface JSONSelectable {
        /**
        * **cache.roles.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.roles_id_seq'::regclass)`
        */
        id: number;
        /**
        * **cache.roles.role**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        role: string;
        /**
        * **cache.roles.account**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        account: string;
        /**
        * **cache.roles.sender**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        sender: string;
        /**
        * **cache.roles.space**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        space: string;
        /**
        * **cache.roles.type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        type: string;
        /**
        * **cache.roles.created_at**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at: number;
        /**
        * **cache.roles.created_at_block**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at_block: number;
        /**
        * **cache.roles.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string;
      }
      export interface Whereable {
        /**
        * **cache.roles.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.roles_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.role**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.account**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        account?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.sender**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.space**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        space?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.created_at**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.created_at_block**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **cache.roles.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **cache.roles.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.roles_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **cache.roles.role**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        role: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.roles.account**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        account: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.roles.sender**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        sender: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.roles.space**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        space: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.roles.type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        type: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **cache.roles.created_at**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **cache.roles.created_at_block**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at_block: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **cache.roles.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **cache.roles.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('cache.roles_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **cache.roles.role**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.roles.account**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        account?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.roles.sender**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        sender?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.roles.space**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        space?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.roles.type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **cache.roles.created_at**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **cache.roles.created_at_block**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        created_at_block?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **cache.roles.cursor**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        cursor?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'roles_pkey' | 'unique_cached_roles';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = entries.Table | roles.Table;
    export type Selectable = entries.Selectable | roles.Selectable;
    export type JSONSelectable = entries.JSONSelectable | roles.JSONSelectable;
    export type Whereable = entries.Whereable | roles.Whereable;
    export type Insertable = entries.Insertable | roles.Insertable;
    export type Updatable = entries.Updatable | roles.Updatable;
    export type UniqueIndex = entries.UniqueIndex | roles.UniqueIndex;
    export type Column = entries.Column | roles.Column;
  
    export type AllBaseTables = [entries.Table, roles.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [entries.Table, roles.Table];
  }


  /* === global aggregate types === */

  export type Schema = 'public' | 'cache';
  export type Table = public.Table | cache.Table;
  export type Selectable = public.Selectable | cache.Selectable;
  export type JSONSelectable = public.JSONSelectable | cache.JSONSelectable;
  export type Whereable = public.Whereable | cache.Whereable;
  export type Insertable = public.Insertable | cache.Insertable;
  export type Updatable = public.Updatable | cache.Updatable;
  export type UniqueIndex = public.UniqueIndex | cache.UniqueIndex;
  export type Column = public.Column | cache.Column;

  export type AllSchemas = ['public', 'cache'];
  export type AllBaseTables = [...public.AllBaseTables, ...cache.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables, ...cache.AllForeignTables];
  export type AllViews = [...public.AllViews, ...cache.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews, ...cache.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews, ...cache.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "accounts": accounts.Selectable;
    "collection_items": collection_items.Selectable;
    "collections": collections.Selectable;
    "cursors": cursors.Selectable;
    "entities": entities.Selectable;
    "entity_types": entity_types.Selectable;
    "log_entries": log_entries.Selectable;
    "onchain_profiles": onchain_profiles.Selectable;
    "ops": ops.Selectable;
    "proposal_votes": proposal_votes.Selectable;
    "proposals": proposals.Selectable;
    "proposed_editors": proposed_editors.Selectable;
    "proposed_members": proposed_members.Selectable;
    "proposed_subspaces": proposed_subspaces.Selectable;
    "proposed_versions": proposed_versions.Selectable;
    "space_editors": space_editors.Selectable;
    "space_members": space_members.Selectable;
    "space_subspaces": space_subspaces.Selectable;
    "spaces": spaces.Selectable;
    "triples": triples.Selectable;
    "versions": versions.Selectable;
    "cache.entries": cache.entries.Selectable;
    "cache.roles": cache.roles.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "accounts": accounts.JSONSelectable;
    "collection_items": collection_items.JSONSelectable;
    "collections": collections.JSONSelectable;
    "cursors": cursors.JSONSelectable;
    "entities": entities.JSONSelectable;
    "entity_types": entity_types.JSONSelectable;
    "log_entries": log_entries.JSONSelectable;
    "onchain_profiles": onchain_profiles.JSONSelectable;
    "ops": ops.JSONSelectable;
    "proposal_votes": proposal_votes.JSONSelectable;
    "proposals": proposals.JSONSelectable;
    "proposed_editors": proposed_editors.JSONSelectable;
    "proposed_members": proposed_members.JSONSelectable;
    "proposed_subspaces": proposed_subspaces.JSONSelectable;
    "proposed_versions": proposed_versions.JSONSelectable;
    "space_editors": space_editors.JSONSelectable;
    "space_members": space_members.JSONSelectable;
    "space_subspaces": space_subspaces.JSONSelectable;
    "spaces": spaces.JSONSelectable;
    "triples": triples.JSONSelectable;
    "versions": versions.JSONSelectable;
    "cache.entries": cache.entries.JSONSelectable;
    "cache.roles": cache.roles.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "accounts": accounts.Whereable;
    "collection_items": collection_items.Whereable;
    "collections": collections.Whereable;
    "cursors": cursors.Whereable;
    "entities": entities.Whereable;
    "entity_types": entity_types.Whereable;
    "log_entries": log_entries.Whereable;
    "onchain_profiles": onchain_profiles.Whereable;
    "ops": ops.Whereable;
    "proposal_votes": proposal_votes.Whereable;
    "proposals": proposals.Whereable;
    "proposed_editors": proposed_editors.Whereable;
    "proposed_members": proposed_members.Whereable;
    "proposed_subspaces": proposed_subspaces.Whereable;
    "proposed_versions": proposed_versions.Whereable;
    "space_editors": space_editors.Whereable;
    "space_members": space_members.Whereable;
    "space_subspaces": space_subspaces.Whereable;
    "spaces": spaces.Whereable;
    "triples": triples.Whereable;
    "versions": versions.Whereable;
    "cache.entries": cache.entries.Whereable;
    "cache.roles": cache.roles.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "accounts": accounts.Insertable;
    "collection_items": collection_items.Insertable;
    "collections": collections.Insertable;
    "cursors": cursors.Insertable;
    "entities": entities.Insertable;
    "entity_types": entity_types.Insertable;
    "log_entries": log_entries.Insertable;
    "onchain_profiles": onchain_profiles.Insertable;
    "ops": ops.Insertable;
    "proposal_votes": proposal_votes.Insertable;
    "proposals": proposals.Insertable;
    "proposed_editors": proposed_editors.Insertable;
    "proposed_members": proposed_members.Insertable;
    "proposed_subspaces": proposed_subspaces.Insertable;
    "proposed_versions": proposed_versions.Insertable;
    "space_editors": space_editors.Insertable;
    "space_members": space_members.Insertable;
    "space_subspaces": space_subspaces.Insertable;
    "spaces": spaces.Insertable;
    "triples": triples.Insertable;
    "versions": versions.Insertable;
    "cache.entries": cache.entries.Insertable;
    "cache.roles": cache.roles.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "accounts": accounts.Updatable;
    "collection_items": collection_items.Updatable;
    "collections": collections.Updatable;
    "cursors": cursors.Updatable;
    "entities": entities.Updatable;
    "entity_types": entity_types.Updatable;
    "log_entries": log_entries.Updatable;
    "onchain_profiles": onchain_profiles.Updatable;
    "ops": ops.Updatable;
    "proposal_votes": proposal_votes.Updatable;
    "proposals": proposals.Updatable;
    "proposed_editors": proposed_editors.Updatable;
    "proposed_members": proposed_members.Updatable;
    "proposed_subspaces": proposed_subspaces.Updatable;
    "proposed_versions": proposed_versions.Updatable;
    "space_editors": space_editors.Updatable;
    "space_members": space_members.Updatable;
    "space_subspaces": space_subspaces.Updatable;
    "spaces": spaces.Updatable;
    "triples": triples.Updatable;
    "versions": versions.Updatable;
    "cache.entries": cache.entries.Updatable;
    "cache.roles": cache.roles.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "accounts": accounts.UniqueIndex;
    "collection_items": collection_items.UniqueIndex;
    "collections": collections.UniqueIndex;
    "cursors": cursors.UniqueIndex;
    "entities": entities.UniqueIndex;
    "entity_types": entity_types.UniqueIndex;
    "log_entries": log_entries.UniqueIndex;
    "onchain_profiles": onchain_profiles.UniqueIndex;
    "ops": ops.UniqueIndex;
    "proposal_votes": proposal_votes.UniqueIndex;
    "proposals": proposals.UniqueIndex;
    "proposed_editors": proposed_editors.UniqueIndex;
    "proposed_members": proposed_members.UniqueIndex;
    "proposed_subspaces": proposed_subspaces.UniqueIndex;
    "proposed_versions": proposed_versions.UniqueIndex;
    "space_editors": space_editors.UniqueIndex;
    "space_members": space_members.UniqueIndex;
    "space_subspaces": space_subspaces.UniqueIndex;
    "spaces": spaces.UniqueIndex;
    "triples": triples.UniqueIndex;
    "versions": versions.UniqueIndex;
    "cache.entries": cache.entries.UniqueIndex;
    "cache.roles": cache.roles.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "accounts": accounts.Column;
    "collection_items": collection_items.Column;
    "collections": collections.Column;
    "cursors": cursors.Column;
    "entities": entities.Column;
    "entity_types": entity_types.Column;
    "log_entries": log_entries.Column;
    "onchain_profiles": onchain_profiles.Column;
    "ops": ops.Column;
    "proposal_votes": proposal_votes.Column;
    "proposals": proposals.Column;
    "proposed_editors": proposed_editors.Column;
    "proposed_members": proposed_members.Column;
    "proposed_subspaces": proposed_subspaces.Column;
    "proposed_versions": proposed_versions.Column;
    "space_editors": space_editors.Column;
    "space_members": space_members.Column;
    "space_subspaces": space_subspaces.Column;
    "spaces": spaces.Column;
    "triples": triples.Column;
    "versions": versions.Column;
    "cache.entries": cache.entries.Column;
    "cache.roles": cache.roles.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "accounts": accounts.SQL;
    "collection_items": collection_items.SQL;
    "collections": collections.SQL;
    "cursors": cursors.SQL;
    "entities": entities.SQL;
    "entity_types": entity_types.SQL;
    "log_entries": log_entries.SQL;
    "onchain_profiles": onchain_profiles.SQL;
    "ops": ops.SQL;
    "proposal_votes": proposal_votes.SQL;
    "proposals": proposals.SQL;
    "proposed_editors": proposed_editors.SQL;
    "proposed_members": proposed_members.SQL;
    "proposed_subspaces": proposed_subspaces.SQL;
    "proposed_versions": proposed_versions.SQL;
    "space_editors": space_editors.SQL;
    "space_members": space_members.SQL;
    "space_subspaces": space_subspaces.SQL;
    "spaces": spaces.SQL;
    "triples": triples.SQL;
    "versions": versions.SQL;
    "cache.entries": cache.entries.SQL;
    "cache.roles": cache.roles.SQL;
  }[T];

}
